snippet class TestCase Class
	class ${1:`expand("%:r")`}
	    extends ${2:PHPUnit_Framework_TestCase}
	{
		protected function setUp()
		{
			${3:// code ...}
		}
	}
snippet t
	$this->${1:arg}
snippet fun
	public function test${1:Name}()
	{
		${2:// code...}
	}
# snippet     setUpBeforeClass
# 	protected function setUpBeforeClass()
# 	{
# 		${0:# code ...}
# 	}
# 
# snippet     setUp
# 	protected function setUp()
# 	{
# 		${0:# code...}
# 	}
# 
# snippet     assertPreConditions
# 	protected function assertPreConditions()
# 	{
# 		${0:# code...}
# 	}
# 
# snippet     testOne
# 	protected function testOne()
# 	{
# 		${0:# code...}
# 	}
# 
# snippet     testTwo
# 	protected function testTwo()
# 	{
# 		${0:# code...}
# 	}
# 
# snippet     assertPostConditions
# 	protected function assertPostConditions()
# 	{
# 		${0:# code...}
# 	}
# 
# snippet     tearDown
# 	protected function tearDown()
# 	{
# 		${0:# code ...}
# 	}
# 
# snippet     tearDownAfterClass
# 	protected function tearDownAfterClass()
# 	{
# 		${0:# code ...}
# 	}
# 
# snippet     onNotSuccessfulTest
# 	protected function onNotSuccessfulTest(${1:Exception $e})
# 	{
# 		${0:# code...}
# 		throw $e;
# 	}
# 
# snippet     assert
# 	/**
# 	 * @assert (${1}) ${2:==} ${3}
# 	 */
# 	${0:# code ...}
# 
# snippet     author
# 	/**
# 	 * @author ${1}
# 	 */
# 	${0:# code ...}
# 
# snippet     backupGlobals
# 	/**
# 	 * @backupGlobals ${1:disabled}
# 	 */
# 	${0:# code ...}
# 
# snippet     backupStaticAttributes
# 	/**
# 	 * @backupStaticAttributes ${1:disabled}
# 	 */
# 	${0:# code ...}
# 
# snippet     covers
# 	/**
# 	 * @covers ${1:ClassName}::${2:methodName}
# 	 */
# 	${0:# code ...}
# 
# snippet     dataProvider
# 	/**
# 	 * @dataProvider ${1:provider}
# 	 */
# 	${0:# code ...}
# 
# snippet     depends
# 	/**
# 	 * @depends ${1}
# 	 */
# 	${0:# code ...}
# 
# snippet     expectedException
# 	/**
# 	 * @expectedException ${1}
# 	 */
# 	${0:# code ...}
# 
# snippet     expectedExceptionCode
# 	/**
# 	 * @expectedException ${1:name}
# 	 * @expectedExceptionCode ${2:code}
# 	 */
# 	${0:# code ...}
# 
# snippet     expectedExceptionMessage
# 	/**
# 	 * @expectedException ${1:name}
# 	 * @expectedExceptionMessage ${2:message}
# 	 */
# 	${0:# code ...}
# 
# snippet     group
# 	/**
# 	 * @group ${1}
# 	 */
# 	${0:# code ...}
# 
# snippet     outputBuffering
# 	/**
# 	 * @outputBuffering ${1:enabled}
# 	 */
# 	${0:# code ...}
# 
# snippet     runTestsInSeparateProcesses
# 	/**
# 	 * @runTestsInSeparateProcesses
# 	 */
# 	${0:# code ...}
# 
# snippet     runInSeparateProcess
# 	/**
# 	 * @runInSeparateProcess
# 	 */
# 	${0:# code ...}
# 
# snippet     test
# 	/**
# 	 * @test
# 	 */
# 	${0:# code ...}
# 
# snippet     testdox
# 	/**
# 	 * @testdox
# 	 */
# 	${0:# code ...}
# 
# snippet     ticket
# 	/**
# 	 * @ticket
# 	 */
# 	${0:# code ...}
# 
# 
# # Assertions
# ############
# 
# snippet     aArrayHasKey
# 	$this->assertArrayHasKey(${1:key}, ${2:array});
# 
# snippet     aArrayNotHasKey
# 	$this->assertArrayNotHasKey(${1:key}, ${2:array});
# 
# snippet     aClassHasAttribute
# 	$this->assertClassHasAttribute(${1:attributeName}, ${2:className});
# 
# snippet     aClassNotHasAttribute
# 	$this->assertClassNotHasAttribute(${1:attributeName}, ${2:className});
# 
# snippet     aClassHasStaticAttribute
# 	$this->assertClassHasStaticAttribute(${1:attributeName}, ${2:className});
# 
# snippet     aClassNotHasStaticAttribute
# 	$this->assertClassNotHasStaticAttribute(${1:attributeName}, ${2:className});
# 
# snippet     aContains
# 	$this->assertContains(${1:needle}, ${2:haystack});
# 
# snippet     aNotContains
# 	$this->assertNotContains(${1:needle}, ${2:haystack});
# 
# snippet     aAttributeContains
# 	$this->assertAttributeContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});
# 
# snippet     aAttributeNotContains
# 	$this->assertAttributeNotContains(${1:needle}, ${2:haystackAttributeName}, ${3:haystackClassOrObject});
# 
# snippet     aContainsOnly
# 	$this->assertContainsOnly(${1:type}, ${2:haystack});
# 
# snippet     aNotContainsOnly
# 	$this->assertNotContainsOnly(${1:type}, ${2:haystack});
# 
# snippet     aAttributeContainsOnly
# 	$this->assertAttributeContainsOnly(${1:type}, ${2:haystack});
# 
# snippet     aAttributeNotContainsOnly
# 	$this->assertAttributeNotContainsOnly(${1:type}, ${2:haystack});
# 
# snippet     aEmpty
# 	$this->assertEmpty(${1:actual});
# 
# snippet     aNotEmpty
# 	$this->assertNotEmpty(${1:actual});
# 
# snippet     aAttributeEmpty
# 	$this->assertAttributeEmpty(${1:actual});
# 
# snippet     aAttributeNotEmpty
# 	$this->assertAttributeNotEmpty(${1:actual});
# 
# snippet     aEqualXMLStructure
# 	$this->assertEqualXMLStructure(${1:expectedElement}, ${2:actualElement});
# 
# snippet     aEquals
# 	$this->assertEquals(${1:expected}, ${2:actual});
# 
# snippet     aNotEquals
# 	$this->assertNotEquals(${1:expected}, ${2:actual});
# 
# snippet     aAttributeEquals
# 	$this->assertAttributeEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aAttributeNotEquals
# 	$this->assertAttributeNotEquals(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aFalse
# 	$this->assertfalse(${1:condition});
# 
# snippet     aTrue
# 	$this->assertfalse(${1:condition});
# 
# snippet     aFileEquals
# 	$this->assertFileEquals(${1:expected}, ${2:actual});
# 
# snippet     aFileNotEquals
# 	$this->assertFileNotEquals(${1:expected}, ${2:actual});
# 
# snippet     aFileExists
# 	$this->assertFileEquals(${1:filename});
# 
# snippet     aFileNotExists
# 	$this->assertFileNotEquals(${1:filename});
# 
# snippet     aGreaterThan
# 	$this->assertGreaterThan(${1:expected}, ${2:actual});
# 
# snippet     aAttributeGreaterThan
# 	$this->assertAttributeGreaterThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aGreaterThanOrEqual
# 	$this->assertGreaterThanOrEqual(${1:expected}, ${2:actual});
# 
# snippet     aAttributeGreaterThanOrEqual
# 	$this->assertAttributeGreaterThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aInstanceOf
# 	$this->assertInstanceOf(${1:expected}, ${2:actual});
# 
# snippet     aNotInstanceOf
# 	$this->assertNotInstanceOf(${1:expected}, ${2:actual});
# 
# snippet     aAttributeInstanceOf
# 	$this->assertAttributeInstanceOf(${1:expected}, ${2:actualAttributeName});
# 
# snippet     aAttributeNotInstanceOf
# 	$this->assertAttributeNotInstanceOf(${1:expected}, ${2:actualAttributeName});
# 
# snippet     aInternalType
# 	$this->assertInternalType(${1:expected}, ${2:actual});
# 
# snippet     aNotInternalType
# 	$this->assertNotInternalType(${1:expected}, ${2:actual});
# 
# snippet     aAttributeInternalType
# 	$this->assertAttributeInternalType(${1:expected}, ${2:actualAttributeName});
# 
# snippet     aAttributeNotInternalType
# 	$this->assertAttributeNotInternalType(${1:expected}, ${2:actualAttributeName});
# 
# snippet     aLessThan
# 	$this->assertLessThan(${1:expected}, ${2:actual});
# 
# snippet     aAttributeLessThan
# 	$this->assertAttributeLessThan(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aLessThanOrEqual
# 	$this->assertLessThanOrEqual(${1:expected}, ${2:actual});
# 
# snippet     aAttributeLessThanOrEqual
# 	$this->assertAttributeLessThanOrEqual(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aNull
# 	$this->assertNull(${1:variable});
# 
# snippet     aNotNull
# 	$this->assertNotNull(${1:variable});
# 
# snippet     aObjectHasAttribute
# 	$this->assertObjectHasAttribute(${1:attributeName}, ${2:object});
# 
# snippet     aObjectNotHasAttribute
# 	$this->assertObjectNotHasAttribute(${1:attributeName}, ${2:object});
# 
# snippet     aRegExp
# 	$this->assertRegExp(${1:patern}, ${2:string});
# 
# snippet     aNotRegExp
# 	$this->assertNotRegExp(${1:patern}, ${2:string});
# 
# snippet     aStringMatchesFormat
# 	$this->assertStringMatchesFormat(${1:format}, ${2:string});
# 
# snippet     aStringNotMatchesFormat
# 	$this->assertStringNotMatchesFormat(${1:format}, ${2:string});
# 
# snippet     aStringMatchesFormatFile
# 	$this->assertStringMatchesFormatFile(${1:formatFile}, ${2:string});
# 
# snippet     aStringNotMatchesFormatFile
# 	$this->assertStringNotMatchesFormatFile(${1:formatFile}, ${2:string});
# 
# snippet     aSame
# 	$this->assertSame(${1:expected}, ${2:actual});
# 
# snippet     aNotSame
# 	$this->assertNotSame(${1:expected}, ${2:actual});
# 
# snippet     aAttributeSame
# 	$this->assertAttributeSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aAttributeNotSame
# 	$this->assertAttributeNotSame(${1:expected}, ${2:actualAttributeName}, ${3:actualClassOrObject});
# 
# snippet     aSelectCount
# 	$tshi->assertSelectCount(${1:selector}, ${2:count}, ${3:actual});
# 
# snippet     aSelectEquals
# 	$this->assertSelectEquals(${1:selector}, ${2:content}, ${3:count}, ${4:actual});
# 
# snippet     aSelectRegExp
# 	$this->assertSelectRegExp(${1:selector}, ${2:pattern}, ${3:count}, ${4:actual});
# 
# snippet     aStringEndsWith
# 	$this->assertStringEndsWith(${1:suffix}, ${2:string});
# 
# snippet     aStringEndsNotWith
# 	$this->assertStringEndsNotWith(${1:suffix}, ${2:string});
# 
# snippet     aStringEqualsFile
# 	$this->assertStringEqualsFile(${1:expectedFile}, ${2:actualString});
# 
# snippet     aStringNotEqualsFile
# 	$this->assertStringNotEqualsFile(${1:expectedFile}, ${2:actualString});
# 
# snippet     aStringStartsWith
# 	$this->assertStringStartsWith(${1:prefix}, ${2:string});
# 
# snippet     aStringStartsNotWith
# 	$this->assertStringStartsNotWith(${1:prefix}, ${2:string});
# 
# snippet     aTag
# 	$this->assertTag(${1:matcher}, ${2:actual});
# 
# snippet     aNotTag
# 	$this->assertNotTag(${1:matcher}, ${2:actual});
# 
# snippet     aThat
# 	$this->assertThat(${1:value}, ${2:PHPUnit_Framework_Constraint constraint});
# 
# ################################################################################
# # WARNING:
# # assertType() assertNotType(), assertAttributeType(), assertAttributeNotType()
# # That will be removed in PHPUnit 3.6 and should no longer be used.
# #
# # When asserting internal types, please used assertInternalType().
# # When asserting that an object is an instance of a specified class or interface,
# #  Please used assertInstanceOf().
# ################################################################################
# #snippet     aType
# #abbr        assertType
# #	$this->assertType(${1:expected}, ${2:actual});
# #
# #snippet     aNotType
# #abbr        assertNotType
# #	$this->assertNotType(${1:expected}, ${2:actual});
# #
# #snippet     aAttributeType
# #abbr        assertAttributeType
# #	$this->assertAttributeType(${1:expected}, ${2:actualAttributeName});
# #
# #snippet     aAttributeNotType
# #abbr        assertAttributeNotType
# #	$this->assertAttributeNotType(${1:expected}, ${2:actualAttributeName});
# 
# snippet     aXmlFileEqualsXmlFile
# 	$this->assertXmlFileEqualsXmlFile(${1:expectedFile}, ${2:actualFile});
# 
# snippet     aXmlFileNotEqualsXmlFile
# 	$this->assertXmlFileNotEqualsXmlFile(${1:expectedFile}, ${2:actualFile});
# 
# snippet     aXmlStringEqualsXmlFile
# 	$this->assertXmlStringEqualsXmlFile(${1:expectedFile}, ${2:actualXml});
# 
# snippet     aXmlStringNotEqualsXmlFile
# 	$this->assertXmlStringNotEqualsXmlFile(${1:expectedFile}, ${2:actualXml});
# 
# snippet     aXmlStringEqualsXmlString
# 	$this->assertXmlStringEqualsXmlString(${1:expectedXml}, ${2:actualXml});
# 
# snippet     aXmlStringNotEqualsXmlString
# 	$this->assertXmlStringNotEqualsXmlString(${1:expectedXml}, ${2:actualXml});
# 
# # Mock, Stub
# ############
# snippet     getMock
# 	$stub = $this->getMock(${0:String className});
# 
# snippet     mock
# 	$stub = $this->getMock(${1:String $originalClassName}, ${2:$methods = array()}, ${3:$arguments = array()}, ${4:$mockClassName = ''}, ${5:$callOriginalConstructor = TRUE}, ${6:$callOriginalClone = TRUE}, ${7:$callAutoload = TRUE});
# 
# snippet     getMockBuilder
# 
# snippet     mockbuilder
# 	$stub = $this->getMockBuilder(${0:String $originalClassName})
# 		->disableOriginalConstructor()
# 		->getMock();
# 
# 
# 
# 
# # Incomplete and Skipped tests
